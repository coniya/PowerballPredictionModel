# Powerball Number Prediction Model
import pandas as pd
import numpy as np
import random
from collections import Counter
from itertools import combinations

# Load historical data
data_path = 'Data/CleanedData_2010_2025.csv'  # Adjust path as needed
df = pd.read_csv(data_path)

#typically going to be between 10-15 otherwise could too cold or too hot respectively
hot_limit = 15
cold_limit = 15

#filter from a starting year from 2010 to 2025
start_year = 2022 #change to what year you want to start reading from
df['Draw Date'] = pd.to_datetime(df['Draw Date']) #make sure its datetime

#filter for draws from start_year until today
filtered_df = df[df['Draw Date'].dt.year >= start_year]

#Now use the filtered dataframe for predictions

# Ensure correct data types
white_balls= ["Num 1", "Num 2", "Num 3", "Num 4", "Num 5"]
powerball = ["Powerball"]

df[white_balls] = df[white_balls].astype(int)
df[powerball] = df[powerball].astype(int)

# Place all values into a single array ignoring Powerball
all_white_numbers = filtered_df[white_balls].values.flatten()
powerballs = filtered_df[powerball].values.flatten()

# count the numbers that showed the most in the last 3 years
white_most_freq = pd.Series(all_white_numbers).value_counts().index.to_list()
powerball_most_freq = pd.Series(powerballs).value_counts().index.to_list()

# count the numbers that showed the least in the last 3 years
white_least_freq = pd.Series(all_white_numbers).value_counts().index.to_list()[::-1]
powerball_least_freq = pd.Series(powerballs).value_counts().index.to_list()[::-1]

def get_overdue(draws, number_range):
    total_draws = draws.shape[0]
    last_seen = {num: -1 for num in range(1, number_range + 1)}
    
    #iterate through each draw in order (by date)
    
    for i, row in enumerate(draws):
        for num in row:
            last_seen[num] = i #update last seen
            
    #compute overdue values
    overdue_numbers = []
    for num in range(1, number_range + 1):
        if last_seen[num] == -1:
            overdue_value = total_draws + 1 #never seen
        else:
            overdue_value = total_draws - last_seen[num]
        overdue_numbers.append((num, overdue_value))
    
    #sort overdue numbers by their overdue value
    overdue_numbers.sort(key=lambda x: x[1], reverse=True)
    return [num for num, _ in overdue_numbers]


# Get overdue white balls and powerballs
# White balls (1â€“69 range)
white_overdue = get_overdue(filtered_df[white_balls].values, 69)

# Powerball (1â€“26 range)
powerball_overdue = get_overdue(filtered_df[powerball].values, 26)

# ---- Strategy dictionary ----
#has 2 keys: "white" and "powerball"
#values for each key are dictionaries(nested) with strategies "hot", "cold", and "overdue"
lottery_strategies = {
    "white": {
        "hot": pd.Series(all_white_numbers).value_counts().index.tolist(),
        "cold": pd.Series(all_white_numbers).value_counts().index.tolist()[::-1],
        "overdue": white_overdue,
    },
    "powerball": {
        "hot": pd.Series(powerballs).value_counts().index.tolist(),
        "cold": pd.Series(powerballs).value_counts().index.tolist()[::-1],
        "overdue": powerball_overdue,
    }
}

# --- Generate number pairs from past draws ---
def get_number_pairs(draws):
    pair_list = []
    for row in draws:
        row_pairs = combinations(sorted(row), 2)
        pair_list.extend(row_pairs)
    pair_counts = Counter(pair_list)
    sorted_pairs = [pair for pair, _ in pair_counts.most_common()]
    return sorted_pairs

# --- Add number pairs to lottery strategies ---
lottery_strategies["white"]["pairs"] = get_number_pairs(filtered_df[white_balls].values)

#slice the lists to only contain a certain number of elements
hot_numbers = lottery_strategies["white"]["hot"][:hot_limit]
cold_numbers = lottery_strategies["white"]["cold"][:cold_limit]
overdue_numbers = lottery_strategies["white"]["overdue"] #keep full list


def get_number_pairs(draws):
    pair_list = []
    for row in draws:
        row_pairs = combinations(sorted(row), 2)
        pair_list.extend(row_pairs)
    pair_counts = Counter(pair_list)
    sorted_pairs = [pair for pair, _ in pair_counts.most_common()]
    return sorted_pairs

# Add number pairs to lottery strategies (example)
lottery_strategies["white"]["pairs"] = get_number_pairs(filtered_df[white_balls].values)

def generate_multiple_tickets_with_pairs(lottery_strategies):
    try:
        num_tickets = int(input("How many tickets do you want to generate? "))
    except ValueError:
        print("Please enter a valid integer.")
        return

    tickets = []

    for ticket_num in range(1, num_tickets + 1):
        white_pick = []
        print("\nGenerating Ticket(s)...")

        #ask user about freq number pair
        use_pair = input("Do you want to include a frequent number pair in this ticket? (y/n): ").lower()
        if use_pair == "y" and lottery_strategies["white"]["pairs"]:
            top_pairs = lottery_strategies["white"]["pairs"][:10]  # top 10 pairs
            chosen_pair = random.choice(top_pairs)
            white_pick.extend(chosen_pair)
            print(f"Pair chosen: {chosen_pair}")

        #calculate remaining numbers needed
        remaining_needed = 5 - len(white_pick)
        if remaining_needed > 0:
            print(f"You need {remaining_needed} more numbers to reach 5 WHITE balls.")

            #get user input for remaining white balls
            while True:
                try:
                    hot_count_white = int(input("Number from HOT white balls: "))
                    cold_count_white = int(input("Number from COLD white balls: "))
                    overdue_count_white = int(input("Number from OVERDUE white balls: "))
                except ValueError:
                    print("Please enter valid integers.")
                    continue

                total_remaining = hot_count_white + cold_count_white + overdue_count_white
                if total_remaining != remaining_needed:
                    print(f"Total remaining numbers must be exactly {remaining_needed}. You entered {total_remaining}. Try again.")
                    continue
                break

            #pick remaining white balls
            if hot_count_white > 0:
                white_pick += random.sample(lottery_strategies["white"]["hot"], hot_count_white)
            if cold_count_white > 0:
                white_pick += random.sample(lottery_strategies["white"]["cold"], cold_count_white)
            if overdue_count_white > 0:
                white_pick += random.sample(lottery_strategies["white"]["overdue"], overdue_count_white)

        #remove duplicates and fill any missing numbers
        white_pick = list(set(white_pick))
        while len(white_pick) < 5:
            remaining = set(range(1, 70)) - set(white_pick)
            white_pick.append(random.choice(list(remaining)))

        #get user input for powerball
        while True:
            try:
                hot_count_pb = int(input("Number from HOT Powerballs: "))
                cold_count_pb = int(input("Number from COLD Powerballs: "))
                overdue_count_pb = int(input("Number from OVERDUE Powerballs: "))
            except ValueError:
                print("Please enter valid integers.")
                continue

            total_pb = hot_count_pb + cold_count_pb + overdue_count_pb
            if total_pb != 1:
                print(f"Total Powerball numbers must be exactly 1. You entered {total_pb}. Try again.")
                continue
            break

        #pick powerball
        powerball_options = []
        if hot_count_pb > 0:
            powerball_options += random.sample(lottery_strategies["powerball"]["hot"], hot_count_pb)
        if cold_count_pb > 0:
            powerball_options += random.sample(lottery_strategies["powerball"]["cold"], cold_count_pb)
        if overdue_count_pb > 0:
            powerball_options += random.sample(lottery_strategies["powerball"]["overdue"], overdue_count_pb)
        powerball_pick = powerball_options[0]

        #store ticket
        tickets.append({
            "white": sorted(white_pick),
            "powerball": powerball_pick
        })


    #print all tickets
    print("\nðŸŽŸ Generated Lottery Tickets ðŸŽŸ")
    for i, ticket in enumerate(tickets, start=1):
        print(f"Ticket {i}: White balls: {ticket['white']}, Powerball: {ticket['powerball']}")


# --- Example usage ---
generate_multiple_tickets_with_pairs(lottery_strategies)